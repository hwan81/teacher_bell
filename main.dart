import 'dart:async';
import 'package:elegant_notification/resources/arrays.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:adaptive_dialog/adaptive_dialog.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:elegant_notification/elegant_notification.dart';
import 'package:just_audio/just_audio.dart';
import 'package:wakelock_plus/wakelock_plus.dart';
import 'package:fullscreen_window/fullscreen_window.dart';

bool isLogin = false;
bool isLoginForm = true;
String supabaseUrl = 'SUPABASEURL';
String supabaseKey = 'SUPABASEKEY';
/**supabase 테이블 정보
 * 
create table public.teacher_bell_alarm (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  finished boolean not null default false,
  finished_at timestamp without time zone null,
  teacher character varying not null,
  email text null,
  constraint teacher_bell_alarm_pkey primary key (id)
) TABLESPACE pg_default;

create table public.teacher_bell_config (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  user_id character varying not null,
  use_sound boolean not null default true,
  use_speech boolean not null default true,
  email character varying not null,
  teachers text[] null,
  pin text not null default '0000'::text,
  constraint teacher_bell_config_pkey primary key (id),
  constraint teacher_bell_config_email_key unique (email),
  constraint teacher_bell_config_user_id_key unique (user_id)
) TABLESPACE pg_default;

 * 
 */

Session? user;
Map<String, dynamic> configData = {
  'useSound': true,
  'useSpeech': true,
  'teachers': <String>[],
  'pin': '0000',
};
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  WakelockPlus.enable();
  FullScreenWindow.setFullScreen(true); // enter fullscreen

  await Supabase.initialize(url: supabaseUrl, anonKey: supabaseKey);
  runApp(const Main());
}

class Main extends StatelessWidget {
  const Main({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.blue[900]!,
          primary: Colors.blue[900]!,
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.blue[900],
          foregroundColor: Colors.white,
        ),
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: Colors.grey[200],
          border: OutlineInputBorder(),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue[900],
            foregroundColor: Colors.white,
            minimumSize: Size(double.infinity, 50),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(4),
            ),
          ),
        ),
        iconTheme: IconThemeData(color: Colors.white),
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(foregroundColor: Colors.white),
        ),
      ),
      home: MainMenu(),
    );
  }
}

class MainMenu extends StatelessWidget {
  MainMenu({super.key});

  List<Map<String, dynamic>> menuName = [
    {
      'name': '스크린모드',
      'icon': Icons.screen_lock_landscape,
      'target': ScreenMain(),
    },
    {'name': '호출모드', 'icon': Icons.alarm, 'target': CallMain()},
    {'name': '설정', 'icon': Icons.edit, 'target': ConfigMain()},
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            spacing: 30,
            children: [
              isLogin
                  ? Text('hello ${user!.user.email}')
                  : Text('login please'),
              for (int k = 0; k < menuName.length; k++)
                ElevatedButton(
                  onPressed: () {
                    if (isLogin == false && k != menuName.length - 1) {
                      var msg = '설정에서 로그인을 먼저 하세요';
                      ScaffoldMessenger.of(
                        context,
                      ).showSnackBar(SnackBar(content: Text(msg)));
                    } else {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => menuName[k]['target'],
                        ),
                      );
                    }
                  },
                  child: ListTile(
                    leading: Icon(menuName[k]['icon'], color: Colors.white),
                    title: Text(
                      menuName[k]['name'],
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

class ScreenMain extends StatefulWidget {
  const ScreenMain({super.key});

  @override
  State<ScreenMain> createState() => _ScreenMainState();
}

class _ScreenMainState extends State<ScreenMain> {
  List<String> speechList = [];
  List<String> preAlarms = [];
  bool nowCalling = false;
  late FlutterTts flutterTts;

  void showAlarm() async {
    nowCalling = true;
    final player = AudioPlayer();

    if (speechList.isNotEmpty) {
      String msg = '${speechList[0]} 선생님,\n학생이 호출하였습니다.';
      if (configData['useSound'] == true) {
        await player.setAsset('assets/sounds/notification.mp3');
        await player.play();
      }
      if (configData['useSpeech'] == true) {
        flutterTts.speak(msg);
      }
      print(speechList);
      ElegantNotification.success(
        animation: AnimationType.fromTop,
        description: Center(
          child: Text(
            msg,
            style: TextStyle(fontSize: 50, fontWeight: FontWeight.bold),
          ),
        ),
        toastDuration: Duration(seconds: 5),
        width: 500,
        height: 400,
        position: Alignment.center,
        onProgressFinished: () {
          speechList.removeAt(0);
          Future.delayed(Duration(seconds: 1), () {
            showAlarm();
          });
        },
      ).show(context);
    } else {
      print('speech list is empty');
      nowCalling = false;
    }
  }

  @override
  void initState() {
    super.initState();

    flutterTts = FlutterTts();
    flutterTts.setLanguage('ko-KR');
    flutterTts.setVoice({"name": "ko-KR-Standard-B", "locale": "ko-KR"});
    flutterTts.setVolume(1.0);
    flutterTts.setPitch(1.0);
    flutterTts.setSpeechRate(1.0);

    Timer.periodic(Duration(seconds: 5), (timer) {
      if (nowCalling == false) {
        showAlarm();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    double containerWidth = MediaQuery.of(context).size.width * 0.2;

    return Scaffold(
      floatingActionButton: GoToMain(),
      body: Column(
        children: [
          Container(
            decoration: BoxDecoration(color: Colors.blue[900]),
            height: 50,
            width: double.infinity,
            child: Center(
              child: Text(
                '선생님 아이들이 밖에서 불러요',
                style: TextStyle(
                  fontSize: 30,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
          ),
          Expanded(
            child: StreamBuilder(
              stream: Supabase.instance.client
                  .from('teacher_bell_alarm')
                  .stream(primaryKey: ['id'])
                  .order('created_at', ascending: false),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return Center(child: Text('오류가 발생했습니다: ${snapshot.error}'));
                }

                if (!snapshot.hasData) {
                  return const Center(child: CircularProgressIndicator());
                }

                final alarms = snapshot.data!;
                if (alarms.isEmpty) {
                  return const Center(child: Text('호출 중인 선생님이 없습니다'));
                }

                List<String> teacherList = [];
                for (var k in alarms) {
                  if (k['finished'] == false &&
                      k['email'] == user!.user.email) {
                    teacherList.add(k['teacher'].toString());
                  }
                }
                // teacherList.sort();
                // preAlarms.sort();

                if (!_areListsEqual(preAlarms, teacherList)) {
                  speechList = teacherList;
                  preAlarms = teacherList;
                }

                return Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Wrap(
                    spacing: 10,
                    runSpacing: 10,
                    children: [
                      for (var alarm in alarms.where(
                        (alarm) =>
                            (alarm['finished'] == false &&
                                alarm['email'] == user!.user.email),
                      ))
                        Container(
                          width: containerWidth,
                          padding: EdgeInsets.all(20),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.grey[300]!),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.grey.withOpacity(0.1),
                                spreadRadius: 1,
                                blurRadius: 3,
                                offset: Offset(0, 2),
                              ),
                            ],
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Expanded(
                                    child: Center(
                                      child: Text(
                                        '${alarm['teacher']}선생님',
                                        style: TextStyle(
                                          fontSize: 40,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                              SizedBox(height: 4),
                              Text(
                                '호출 시간: ${DateTime.parse(alarm['created_at']).add(Duration(hours: 9)).toString().substring(0, 16)}',
                                style: TextStyle(
                                  fontSize: 12,
                                  color: Colors.grey[600],
                                ),
                              ),
                              TextButton(
                                child: Text(
                                  '삭제',
                                  style: TextStyle(
                                    color: Colors.black,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                onPressed: () async {
                                  try {
                                    await Supabase.instance.client
                                        .from('teacher_bell_alarm')
                                        .update({'finished': true})
                                        .eq('id', alarm['id']);

                                    // 상태 강제 업데이트
                                    setState(() {});

                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        content: Text(
                                          '${alarm['teacher']} 선생님 호출이 종료되었습니다',
                                        ),
                                      ),
                                    );
                                  } catch (e) {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        content: Text('호출 종료 중 오류가 발생했습니다: $e'),
                                      ),
                                    );
                                  }
                                },
                              ),
                            ],
                          ),
                        ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  bool _areListsEqual(List<String> list1, List<String> list2) {
    if (list1.length != list2.length) return false;
    for (int i = 0; i < list1.length; i++) {
      if (list1[i] != list2[i]) return false;
    }
    return true;
  }
}

class CallMain extends StatefulWidget {
  const CallMain({super.key});

  @override
  State<CallMain> createState() => _CallMainState();
}

class _CallMainState extends State<CallMain> {
  var instance = Supabase.instance;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: GoToMain(),
      body: Column(
        children: [
          Container(
            decoration: BoxDecoration(color: Colors.blue[900]),
            height: 50,
            width: double.infinity,
            child: Center(
              child: Text(
                '호출할 선생님을 선택하세요. CCTV촬영중입니다.',
                style: TextStyle(
                  fontSize: 30,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
          ),
          Expanded(
            child: Row(
              children: [
                //교사 목록
                Flexible(
                  flex: 2,
                  child: Container(
                    height: double.infinity,
                    width: double.infinity,
                    color: Colors.grey[200],
                    child: SingleChildScrollView(
                      child: Padding(
                        padding: const EdgeInsets.all(12.0),
                        child: Wrap(
                          children: [
                            for (var teacher in configData['teachers'])
                              nameContainer(teacher),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
                //호출중 목록
                Flexible(
                  flex: 1,
                  child: Container(
                    height: double.infinity,
                    width: double.infinity,
                    color: Colors.grey[300],
                    child: calledList(),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  StreamBuilder<SupabaseStreamEvent> calledList() {
    return StreamBuilder(
      stream: Supabase.instance.client
          .from('teacher_bell_alarm')
          .stream(primaryKey: ['id'])
          .order('created_at', ascending: false),
      builder: (context, snapshot) {
        if (snapshot.hasError) {
          return Center(child: Text('오류가 발생했습니다: ${snapshot.error}'));
        }

        if (!snapshot.hasData) {
          return const Center(child: CircularProgressIndicator());
        }

        final alarms = snapshot.data!;
        if (alarms.isEmpty) {
          return const Center(child: Text('호출 중인 선생님이 없습니다'));
        }

        // finished가 false인 항목만 필터링
        final activeAlarms =
            alarms
                .where(
                  (alarm) =>
                      (alarm['finished'] == false &&
                          alarm['email'] == user!.user.email),
                )
                .toList();
        if (activeAlarms.isEmpty) {
          return const Center(child: Text('호출 중인 선생님이 없습니다'));
        }

        return ListView.builder(
          itemCount: activeAlarms.length,
          itemBuilder: (context, index) {
            final alarm = activeAlarms[index];
            final DateTime createdAt = DateTime.parse(
              alarm['created_at'],
            ).add(Duration(hours: 9));
            final String formattedTime =
                '${createdAt.year.toString()}-${createdAt.month.toString().padLeft(2, '0')}-${createdAt.day.toString().padLeft(2, '0')} ${createdAt.hour.toString().padLeft(2, '0')}:${createdAt.minute.toString().padLeft(2, '0')}';

            return ListTile(
              title: Text(
                alarm['teacher'],
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              subtitle: Text('호출 시간: $formattedTime'),
              trailing: IconButton(
                icon: Icon(Icons.delete),
                onPressed: () async {
                  try {
                    await Supabase.instance.client
                        .from('teacher_bell_alarm')
                        .update({'finished': true})
                        .eq('id', alarm['id']);

                    // 상태 강제 업데이트
                    setState(() {});

                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('${alarm['teacher']} 선생님 호출이 종료되었습니다'),
                      ),
                    );
                  } catch (e) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('호출 종료 중 오류가 발생했습니다: $e')),
                    );
                  }
                },
              ),
            );
          },
        );
      },
    );
  }

  GestureDetector nameContainer(teacher) {
    return GestureDetector(
      onTap: () async {
        var result = await showDialog(
          context: context,
          builder:
              (context) => AlertDialog(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                title: Text(
                  '선생님 호출',
                  style: TextStyle(
                    color: Colors.blue[900],
                    fontWeight: FontWeight.bold,
                  ),
                ),
                content: Text('$teacher 선생님을 호출하시겠습니까?'),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.pop(context, false),
                    child: Text(
                      '취소',
                      style: TextStyle(color: Colors.grey[600]),
                    ),
                  ),
                  ElevatedButton(
                    onPressed: () => Navigator.pop(context, true),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue[900],
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: Text('확인'),
                  ),
                ],
              ),
        );

        if (result == true) {
          try {
            await Supabase.instance.client.from('teacher_bell_alarm').insert({
              'teacher': teacher,
              'email': user!.user.email,
            });

            ScaffoldMessenger.of(
              context,
            ).showSnackBar(SnackBar(content: Text('$teacher 선생님 호출됨')));
            print('$teacher 선생님 호출됨');
          } catch (e) {
            print('호출 오류: $e');
            ScaffoldMessenger.of(
              context,
            ).showSnackBar(SnackBar(content: Text('호출 중 오류가 발생했습니다: $e')));
          }
        }
      },
      child: Container(
        margin: EdgeInsets.symmetric(vertical: 10, horizontal: 10),
        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),

        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(5),
          border: Border.all(color: Colors.grey, width: 2),
        ),

        child: Text(
          teacher,
          style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
      ),
    );
  }
}

class GoToMain extends StatelessWidget {
  const GoToMain({super.key});

  @override
  Widget build(BuildContext context) {
    return FloatingActionButton(
      onPressed: () async {
        var pinController = TextEditingController();
        var result = await showDialog(
          context: context,
          builder:
              (context) => AlertDialog(
                title: Text('잠금해제 PIN번호 입력'),
                content: TextFormField(
                  controller: pinController,
                  decoration: InputDecoration(labelText: '잠금해제 PIN번호'),
                ),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.pop(context, false),
                    child: Text('취소'),
                  ),
                  TextButton(
                    onPressed: () => Navigator.pop(context, true),
                    child: Text('확인'),
                  ),
                ],
              ),
        );
        print('popup $result');
        print(pinController.text);
        print(configData['pin']);
        if (result == true && pinController.text == configData['pin']) {
          Navigator.pushAndRemoveUntil(
            context,
            MaterialPageRoute(builder: (context) => Main()),
            (route) => false,
          );
        }
      },
      child: Icon(Icons.home),
    );
  }
}

class ConfigMain extends StatefulWidget {
  const ConfigMain({super.key});

  @override
  State<ConfigMain> createState() => _ConfigMainState();
}

class _ConfigMainState extends State<ConfigMain> {
  // TextEditingController 추가
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  void dispose() {
    // 컨트롤러 해제
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blue[900],
        foregroundColor: Colors.white,
        // AppBar 추가 (선택 사항)
        title: Text('설정'),
      ),
      body: Padding(
        // Padding 추가
        padding: const EdgeInsets.all(16.0), // 여백 설정
        child: isLogin ? configForm() : loginForm(),
      ),
    );
  }

  Column configForm() {
    final teacherController = TextEditingController();
    final pinController = TextEditingController();
    pinController.text = configData['pin'];
    List<String> teachers = [];

    void processTeacherInput(String input) {
      // 쉼표와 줄바꿈을 기준으로 문자열을 분할
      final List<String> splitData =
          input
              .split(RegExp(r'[,\n]')) // 쉼표 또는 줄바꿈으로 분할
              .map((e) => e.trim()) // 각 항목의 앞뒤 공백 제거
              .where((e) => e.isNotEmpty) // 빈 문자열 제거
              .toList();
      if (splitData.isNotEmpty) {
        setState(() {
          teachers = splitData;
          configData['teachers'].addAll(teachers);
          teacherController.clear();
        });
        print('교사 목록: ${configData['teachers']}');
      }
    }

    return Column(
      children: [
        SwitchListTile(
          title: Text('소리로 알리기'),
          value: configData['useSound'] as bool,
          onChanged: (bool value) {
            setState(() {
              configData['useSound'] = value;
            });
          },
        ),
        SwitchListTile(
          title: Text('음성으로 안내하기'),
          value: configData['useSpeech'] as bool,
          onChanged: (bool value) {
            setState(() {
              configData['useSpeech'] = value;
            });
          },
        ),
        ListTile(
          title: Text('PIN번호'),
          subtitle: Text('잠금해제에 사용됩니다. 기본: 0000'),
          trailing: SizedBox(
            width: 100,
            child: TextFormField(
              controller: pinController,
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                contentPadding: EdgeInsets.symmetric(
                  horizontal: 8,
                  vertical: 4,
                ),
              ),
              textAlign: TextAlign.center,
            ),
          ),
        ),
        SizedBox(height: 24),
        Expanded(
          child: ListView.separated(
            itemBuilder:
                (context, index) => ListTile(
                  horizontalTitleGap: 5,
                  leading: Text('${index + 1}'),
                  title: Text(configData['teachers'][index]),
                  trailing: IconButton(
                    onPressed: () {
                      setState(() {
                        configData['teachers'].removeAt(index);
                      });
                    },
                    icon: Icon(Icons.delete),
                  ),
                ),
            separatorBuilder: (context, index) => Divider(),
            itemCount: configData['teachers'].length,
          ),
        ),
        SizedBox(height: 16),
        TextFormField(
          controller: teacherController,
          decoration: InputDecoration(
            fillColor: Colors.grey[200],
            filled: true,
            labelText: '교사 명단 추가하기기',
            hintText: '쉼표 또는 줄바꿈으로 데이터를 입력하세요',
            border: OutlineInputBorder(),
          ),
          maxLines: 5,
          onChanged: (value) {
            teacherController.text = value;
          },
          onEditingComplete: () {
            processTeacherInput(teacherController.text);
          },
          onTap: () {
            ElegantNotification.success(
              description: Text('hello'),
              autoDismiss: true,
              width: 400,
              height: 300,
              position: Alignment.center,
              onProgressFinished: () {
                // setState(() {
                //   speechList.removeAt(0);
                // });
                // showAlarm();
              },
            );
          },
          onTapOutside: (event) {
            processTeacherInput(teacherController.text);
          },
        ),
        SizedBox(height: 16),
        // 입력된 교사 목록 표시
        if (teachers.isNotEmpty) ...[
          Text('입력된 교사 목록:', style: TextStyle(fontWeight: FontWeight.bold)),
          SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 4,
            children:
                teachers.map((teacher) => Chip(label: Text(teacher))).toList(),
          ),
          SizedBox(height: 16),
        ],
        ElevatedButton(
          onPressed: () async {
            // 저장 로직 구현
            try {
              final userId = Supabase.instance.client.auth.currentUser?.id;
              if (userId == null) {
                ScaffoldMessenger.of(
                  context,
                ).showSnackBar(SnackBar(content: Text('로그인이 필요합니다')));
                return;
              }
              configData['pin'] = pinController.text;

              // 설정 데이터 저장
              final response = await Supabase.instance.client
                  .from('teacher_bell_config')
                  .upsert({
                    'user_id': userId,
                    'use_sound': configData['useSound'],
                    'use_speech': configData['useSpeech'],
                    'email': user!.user.email,
                    'teachers': configData['teachers'], // 교사 목록 추가
                    'pin': configData['pin'],
                  }, onConflict: 'email');

              ScaffoldMessenger.of(
                context,
              ).showSnackBar(SnackBar(content: Text('설정이 저장되었습니다')));
            } catch (e) {
              print('저장 오류 상세: $e');
              ScaffoldMessenger.of(
                context,
              ).showSnackBar(SnackBar(content: Text('저장 중 오류가 발생했습니다: $e')));
            }
          },
          style: ElevatedButton.styleFrom(
            minimumSize: Size(double.infinity, 50),
          ),
          child: Text('저장'),
        ),
      ],
    );
  }

  Column loginForm() {
    return Column(
      // Column으로 변경
      mainAxisAlignment: MainAxisAlignment.center, // 중앙 정렬
      children: [
        TextField(
          // 이메일 입력 필드
          controller: _emailController,
          decoration: InputDecoration(
            labelText: '이메일',
            hintText: 'example@email.com',
            border: OutlineInputBorder(), // 테두리 추가
          ),
          keyboardType: TextInputType.emailAddress, // 이메일 키보드 타입
        ),
        SizedBox(height: 16), // 간격 추가
        TextField(
          // 비밀번호 입력 필드
          controller: _passwordController,
          decoration: InputDecoration(
            labelText: '비밀번호',
            border: OutlineInputBorder(), // 테두리 추가
          ),
          obscureText: true, // 비밀번호 가리기
        ),
        SizedBox(height: 24), // 간격 추가

        ElevatedButton(
          // 로그인 버튼
          onPressed: () async {
            // 로그인 로직 구현 위치
            final email = _emailController.text;
            final password = _passwordController.text;
            // 실제 로그인 처리는 여기에 추가하세요.
            try {
              var session = await Supabase.instance.client.auth
                  .signInWithPassword(email: email, password: password);

              if (session.user != null) {
                setState(() {
                  isLogin = true;
                  user = session.session;
                });

                // config 불러오기
                try {
                  final userEmail = user!.user.email;
                  if (userEmail == null) {
                    throw Exception('사용자 이메일이 없습니다');
                  }

                  final config =
                      await Supabase.instance.client
                          .from('teacher_bell_config')
                          .select()
                          .eq('email', userEmail)
                          .maybeSingle();

                  if (config != null) {
                    setState(() {
                      configData['useSound'] = config['use_sound'];
                      configData['useSpeech'] = config['use_speech'];
                      configData['teachers'] = config['teachers'];
                      configData['pin'] = config['pin'];
                    });
                    print('설정 불러오기 성공: $config');
                  }
                } catch (e) {
                  print('설정 불러오기/생성 실패: $e');
                  // 기본값 설정
                  setState(() {
                    configData['useSound'] = true;
                    configData['useSpeech'] = true;
                  });
                }

                Navigator.push(
                  // ignore: use_build_context_synchronously
                  context,
                  MaterialPageRoute(builder: (context) => ConfigMain()),
                );
              }
            } catch (e) {
              var errorMessage = '로그인 오류';
              //error msg
              if (e.toString().contains('email_not_confirmed')) {
                errorMessage = '이메일 인증이 필요합니다';
              }
              var snackBar = SnackBar(content: Text(errorMessage));
              ScaffoldMessenger.of(context).showSnackBar(snackBar);

              print(e);
            }
          },
          style: ElevatedButton.styleFrom(
            // 버튼 스타일링 (선택 사항)
            minimumSize: Size(double.infinity, 50), // 버튼 크기
          ),
          child: Text('로그인'),
        ),
        !isLogin ? SizedBox(height: 40) : SizedBox(),
        !isLogin
            ? ListTile(
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => SignUpForm()),
                );
              },

              title: Text('회원가입'),
            )
            : SizedBox(height: 1),
      ],
    );
  }
}

class SignUpForm extends StatefulWidget {
  const SignUpForm({super.key});

  @override
  State<SignUpForm> createState() => _SignUpFormState();
}

class _SignUpFormState extends State<SignUpForm> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _agreeToTerms = false;
  bool _isLoading = false;
  bool _isSubmitted = false;

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  // 이메일 유효성 검사 함수
  String? _validateEmail(String? value) {
    if (value == null || value.isEmpty) {
      return '이메일을 입력해주세요';
    }
    // 간단한 이메일 형식 검사
    final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');
    if (!emailRegex.hasMatch(value)) {
      return '올바른 이메일 형식이 아닙니다';
    }
    return null;
  }

  // 회원가입 처리 함수
  Future<void> _signUp() async {
    if (_formKey.currentState?.validate() ?? false) {
      if (!_agreeToTerms) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('약관에 동의해주세요')));
        return;
      }

      setState(() {
        _isLoading = true;
      });

      try {
        final response = await Supabase.instance.client.auth.signUp(
          email: _emailController.text,
          password: _passwordController.text,
          data: {'name': _nameController.text},
        );

        if (response.user != null) {
          setState(() {
            _isSubmitted = true;
          });
          // 회원가입 성공
          // ignore: use_build_context_synchronously
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('회원가입 성공! 이메일을 확인해주세요 (5초후 로그인화면으로 이동)')),
          );
          // ignore: use_build_context_synchronously
          Timer(Duration(seconds: 5), () => Navigator.pop(context));
        } else {
          // 회원가입 실패
          // ignore: use_build_context_synchronously
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: Text('회원가입 실패')));
        }
      } catch (e) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('오류: $e')));
      } finally {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('회원가입'),
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                TextFormField(
                  controller: _nameController,
                  decoration: InputDecoration(
                    labelText: '이름',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return '이름을 입력해주세요';
                    }
                    return null;
                  },
                ),
                SizedBox(height: 16),
                TextFormField(
                  controller: _emailController,
                  decoration: InputDecoration(
                    labelText: '이메일',
                    border: OutlineInputBorder(),
                  ),
                  keyboardType: TextInputType.emailAddress,
                  validator: _validateEmail,
                ),
                SizedBox(height: 16),
                TextFormField(
                  controller: _passwordController,
                  decoration: InputDecoration(
                    labelText: '비밀번호',
                    border: OutlineInputBorder(),
                  ),
                  obscureText: true,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return '비밀번호를 입력해주세요';
                    }
                    if (value.length < 6) {
                      return '비밀번호는 최소 6자 이상이어야 합니다';
                    }
                    return null;
                  },
                ),
                SizedBox(height: 24),
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey),
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '약관 및 개인정보 처리방침',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      SizedBox(height: 8),
                      Text(
                        '본 서비스를 이용하시려면 개인정보 수집 및 이용에 동의하셔야 합니다. '
                        '개인정보는 서비스 제공 및 개선 목적으로만 활용됩니다.',
                        style: TextStyle(fontSize: 12),
                      ),
                      SizedBox(height: 8),
                      Row(
                        children: [
                          Checkbox(
                            value: _agreeToTerms,
                            onChanged: (value) {
                              setState(() {
                                _agreeToTerms = value ?? false;
                              });
                            },
                          ),
                          Text('약관에 동의합니다'),
                        ],
                      ),
                    ],
                  ),
                ),
                SizedBox(height: 24),
                _isSubmitted
                    ? Container(
                      padding: EdgeInsets.all(12),
                      child: Text(
                        '확인 메일 전송이 완료되었습니다. 메일함 확인을 부탁드립니다. 스팸메일함에 보관될 수 있으니 확인바랍니다.',
                        style: TextStyle(
                          color: Colors.red,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    )
                    : SizedBox(height: 10),
                ElevatedButton(
                  onPressed: _isLoading ? null : _signUp,
                  style: ElevatedButton.styleFrom(
                    minimumSize: Size(double.infinity, 50),
                  ),
                  child:
                      _isLoading
                          ? CircularProgressIndicator(color: Colors.white)
                          : Text('가입하기'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
